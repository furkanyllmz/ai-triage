{"ast":null,"code":"import _objectSpread from\"C:/Users/tkurt/Desktop/ai-triage/triage-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";const BASE_URL='http://localhost:9000';class TriageApiService{async makeRequest(endpoint){let options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};const url=\"\".concat(BASE_URL).concat(endpoint);const defaultOptions={headers:_objectSpread({'Content-Type':'application/json'},options.headers)};const response=await fetch(url,_objectSpread(_objectSpread({},defaultOptions),options));if(!response.ok){const errorText=await response.text();throw new Error(\"HTTP \".concat(response.status,\": \").concat(errorText));}return response.json();}async startTriage(input){return this.makeRequest('/triage/start',{method:'POST',body:JSON.stringify(input)});}async sendAnswer(caseId,body){return this.makeRequest(\"/triage/\".concat(caseId,\"/answer\"),{method:'PATCH',body:JSON.stringify(body)});}}export const triageApi=new TriageApiService();","map":{"version":3,"names":["BASE_URL","TriageApiService","makeRequest","endpoint","options","arguments","length","undefined","url","concat","defaultOptions","headers","_objectSpread","response","fetch","ok","errorText","text","Error","status","json","startTriage","input","method","body","JSON","stringify","sendAnswer","caseId","triageApi"],"sources":["C:/Users/tkurt/Desktop/ai-triage/triage-frontend/src/services/triageApi.ts"],"sourcesContent":["import { TriageInput, TriageStartResponse, TriageFollowResponse, AnswerBody } from '../types/TriageTypes';\r\n\r\nconst BASE_URL = 'http://localhost:9000';\r\n\r\nclass TriageApiService {\r\n  private async makeRequest<T>(endpoint: string, options: RequestInit = {}): Promise<T> {\r\n    const url = `${BASE_URL}${endpoint}`;\r\n    \r\n    const defaultOptions: RequestInit = {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        ...options.headers,\r\n      },\r\n    };\r\n\r\n    const response = await fetch(url, { ...defaultOptions, ...options });\r\n    \r\n    if (!response.ok) {\r\n      const errorText = await response.text();\r\n      throw new Error(`HTTP ${response.status}: ${errorText}`);\r\n    }\r\n\r\n    return response.json();\r\n  }\r\n\r\n  async startTriage(input: TriageInput): Promise<TriageStartResponse> {\r\n    return this.makeRequest<TriageStartResponse>('/triage/start', {\r\n      method: 'POST',\r\n      body: JSON.stringify(input),\r\n    });\r\n  }\r\n\r\n  async sendAnswer(caseId: string, body: AnswerBody): Promise<TriageFollowResponse> {\r\n    return this.makeRequest<TriageFollowResponse>(`/triage/${caseId}/answer`, {\r\n      method: 'PATCH',\r\n      body: JSON.stringify(body),\r\n    });\r\n  }\r\n}\r\n\r\nexport const triageApi = new TriageApiService();\r\n"],"mappings":"qIAEA,KAAM,CAAAA,QAAQ,CAAG,uBAAuB,CAExC,KAAM,CAAAC,gBAAiB,CACrB,KAAc,CAAAC,WAAWA,CAAIC,QAAgB,CAAyC,IAAvC,CAAAC,OAAoB,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,CAAC,CAAC,CACtE,KAAM,CAAAG,GAAG,IAAAC,MAAA,CAAMT,QAAQ,EAAAS,MAAA,CAAGN,QAAQ,CAAE,CAEpC,KAAM,CAAAO,cAA2B,CAAG,CAClCC,OAAO,CAAAC,aAAA,EACL,cAAc,CAAE,kBAAkB,EAC/BR,OAAO,CAACO,OAAO,CAEtB,CAAC,CAED,KAAM,CAAAE,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAACN,GAAG,CAAAI,aAAA,CAAAA,aAAA,IAAOF,cAAc,EAAKN,OAAO,CAAE,CAAC,CAEpE,GAAI,CAACS,QAAQ,CAACE,EAAE,CAAE,CAChB,KAAM,CAAAC,SAAS,CAAG,KAAM,CAAAH,QAAQ,CAACI,IAAI,CAAC,CAAC,CACvC,KAAM,IAAI,CAAAC,KAAK,SAAAT,MAAA,CAASI,QAAQ,CAACM,MAAM,OAAAV,MAAA,CAAKO,SAAS,CAAE,CAAC,CAC1D,CAEA,MAAO,CAAAH,QAAQ,CAACO,IAAI,CAAC,CAAC,CACxB,CAEA,KAAM,CAAAC,WAAWA,CAACC,KAAkB,CAAgC,CAClE,MAAO,KAAI,CAACpB,WAAW,CAAsB,eAAe,CAAE,CAC5DqB,MAAM,CAAE,MAAM,CACdC,IAAI,CAAEC,IAAI,CAACC,SAAS,CAACJ,KAAK,CAC5B,CAAC,CAAC,CACJ,CAEA,KAAM,CAAAK,UAAUA,CAACC,MAAc,CAAEJ,IAAgB,CAAiC,CAChF,MAAO,KAAI,CAACtB,WAAW,YAAAO,MAAA,CAAkCmB,MAAM,YAAW,CACxEL,MAAM,CAAE,OAAO,CACfC,IAAI,CAAEC,IAAI,CAACC,SAAS,CAACF,IAAI,CAC3B,CAAC,CAAC,CACJ,CACF,CAEA,MAAO,MAAM,CAAAK,SAAS,CAAG,GAAI,CAAA5B,gBAAgB,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}