{"ast":null,"code":"const BASE_URL = 'http://localhost:9000';\nclass TriageApiService {\n  async makeRequest(endpoint, options = {}) {\n    const url = `${BASE_URL}${endpoint}`;\n    const defaultOptions = {\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers\n      }\n    };\n    const response = await fetch(url, {\n      ...defaultOptions,\n      ...options\n    });\n    if (!response.ok) {\n      const errorText = await response.text();\n      throw new Error(`HTTP ${response.status}: ${errorText}`);\n    }\n    return response.json();\n  }\n  async startTriage(input) {\n    console.log('Frontend gönderilen veri:', JSON.stringify(input, null, 2));\n    return this.makeRequest('/triage/start', {\n      method: 'POST',\n      body: JSON.stringify(input)\n    });\n  }\n  async sendAnswer(caseId, body) {\n    return this.makeRequest(`/triage/${caseId}/answer`, {\n      method: 'PATCH',\n      body: JSON.stringify(body)\n    });\n  }\n}\nexport const triageApi = new TriageApiService();","map":{"version":3,"names":["BASE_URL","TriageApiService","makeRequest","endpoint","options","url","defaultOptions","headers","response","fetch","ok","errorText","text","Error","status","json","startTriage","input","console","log","JSON","stringify","method","body","sendAnswer","caseId","triageApi"],"sources":["/home/furkan/Desktop/ai-triage/triage-frontend/src/services/triageApi.ts"],"sourcesContent":["import { TriageInput, TriageStartResponse, TriageFollowResponse, AnswerBody } from '../types/TriageTypes';\n\nconst BASE_URL = 'http://localhost:9000';\n\nclass TriageApiService {\n  private async makeRequest<T>(endpoint: string, options: RequestInit = {}): Promise<T> {\n    const url = `${BASE_URL}${endpoint}`;\n    \n    const defaultOptions: RequestInit = {\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers,\n      },\n    };\n\n    const response = await fetch(url, { ...defaultOptions, ...options });\n    \n    if (!response.ok) {\n      const errorText = await response.text();\n      throw new Error(`HTTP ${response.status}: ${errorText}`);\n    }\n\n    return response.json();\n  }\n\n  async startTriage(input: TriageInput): Promise<TriageStartResponse> {\n    console.log('Frontend gönderilen veri:', JSON.stringify(input, null, 2));\n    return this.makeRequest<TriageStartResponse>('/triage/start', {\n      method: 'POST',\n      body: JSON.stringify(input),\n    });\n  }\n\n  async sendAnswer(caseId: string, body: AnswerBody): Promise<TriageFollowResponse> {\n    return this.makeRequest<TriageFollowResponse>(`/triage/${caseId}/answer`, {\n      method: 'PATCH',\n      body: JSON.stringify(body),\n    });\n  }\n}\n\nexport const triageApi = new TriageApiService();\n"],"mappings":"AAEA,MAAMA,QAAQ,GAAG,uBAAuB;AAExC,MAAMC,gBAAgB,CAAC;EACrB,MAAcC,WAAWA,CAAIC,QAAgB,EAAEC,OAAoB,GAAG,CAAC,CAAC,EAAc;IACpF,MAAMC,GAAG,GAAG,GAAGL,QAAQ,GAAGG,QAAQ,EAAE;IAEpC,MAAMG,cAA2B,GAAG;MAClCC,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClC,GAAGH,OAAO,CAACG;MACb;IACF,CAAC;IAED,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACJ,GAAG,EAAE;MAAE,GAAGC,cAAc;MAAE,GAAGF;IAAQ,CAAC,CAAC;IAEpE,IAAI,CAACI,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAMC,SAAS,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;MACvC,MAAM,IAAIC,KAAK,CAAC,QAAQL,QAAQ,CAACM,MAAM,KAAKH,SAAS,EAAE,CAAC;IAC1D;IAEA,OAAOH,QAAQ,CAACO,IAAI,CAAC,CAAC;EACxB;EAEA,MAAMC,WAAWA,CAACC,KAAkB,EAAgC;IAClEC,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAEC,IAAI,CAACC,SAAS,CAACJ,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;IACxE,OAAO,IAAI,CAACf,WAAW,CAAsB,eAAe,EAAE;MAC5DoB,MAAM,EAAE,MAAM;MACdC,IAAI,EAAEH,IAAI,CAACC,SAAS,CAACJ,KAAK;IAC5B,CAAC,CAAC;EACJ;EAEA,MAAMO,UAAUA,CAACC,MAAc,EAAEF,IAAgB,EAAiC;IAChF,OAAO,IAAI,CAACrB,WAAW,CAAuB,WAAWuB,MAAM,SAAS,EAAE;MACxEH,MAAM,EAAE,OAAO;MACfC,IAAI,EAAEH,IAAI,CAACC,SAAS,CAACE,IAAI;IAC3B,CAAC,CAAC;EACJ;AACF;AAEA,OAAO,MAAMG,SAAS,GAAG,IAAIzB,gBAAgB,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}