{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tkurt\\\\Desktop\\\\ai-triage\\\\triage-frontend\\\\src\\\\contexts\\\\TriageContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TriageContext = /*#__PURE__*/createContext(undefined);\nexport const useTriageContext = () => {\n  _s();\n  const context = useContext(TriageContext);\n  if (!context) {\n    throw new Error('useTriageContext must be used within a TriageProvider');\n  }\n  return context;\n};\n_s(useTriageContext, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const TriageProvider = ({\n  children\n}) => {\n  _s2();\n  const [patientData, setPatientDataState] = useState(null);\n  const [triageResult, setTriageResultState] = useState(null);\n  const [nurseNotes, setNurseNotesState] = useState('');\n  const [isLoading, setIsLoadingState] = useState(false);\n  const [error, setErrorState] = useState(null);\n\n  // Load data from localStorage on mount\n  useEffect(() => {\n    const savedPatientData = localStorage.getItem('triage-patient-data');\n    const savedTriageResult = localStorage.getItem('triage-result');\n    const savedNurseNotes = localStorage.getItem('triage-nurse-notes');\n    if (savedPatientData) {\n      setPatientDataState(JSON.parse(savedPatientData));\n    }\n    if (savedTriageResult) {\n      setTriageResultState(JSON.parse(savedTriageResult));\n    }\n    if (savedNurseNotes) {\n      setNurseNotesState(savedNurseNotes);\n    }\n  }, []);\n  const setPatientData = data => {\n    try {\n      setPatientDataState(data);\n      if (data) {\n        localStorage.setItem('triage-patient-data', JSON.stringify(data));\n      } else {\n        localStorage.removeItem('triage-patient-data');\n      }\n    } catch (error) {\n      console.error('localStorage error:', error);\n      setErrorState('Veri kaydetme hatası');\n    }\n  };\n  const setTriageResult = result => {\n    try {\n      setTriageResultState(result);\n      if (result) {\n        localStorage.setItem('triage-result', JSON.stringify(result));\n      } else {\n        localStorage.removeItem('triage-result');\n      }\n    } catch (error) {\n      console.error('localStorage error:', error);\n      setErrorState('Veri kaydetme hatası');\n    }\n  };\n  const setNurseNotes = notes => {\n    try {\n      setNurseNotesState(notes);\n      if (notes) {\n        localStorage.setItem('triage-nurse-notes', notes);\n      } else {\n        localStorage.removeItem('triage-nurse-notes');\n      }\n    } catch (error) {\n      console.error('localStorage error:', error);\n      setErrorState('Veri kaydetme hatası');\n    }\n  };\n  const clearData = () => {\n    try {\n      setPatientDataState(null);\n      setTriageResultState(null);\n      setNurseNotesState('');\n      setIsLoadingState(false);\n      setErrorState(null);\n      localStorage.removeItem('triage-patient-data');\n      localStorage.removeItem('triage-result');\n      localStorage.removeItem('triage-nurse-notes');\n    } catch (error) {\n      console.error('localStorage error:', error);\n      setErrorState('Veri temizleme hatası');\n    }\n  };\n  const value = {\n    patientData,\n    setPatientData,\n    triageResult,\n    setTriageResult,\n    nurseNotes,\n    setNurseNotes,\n    clearData\n  };\n  return /*#__PURE__*/_jsxDEV(TriageContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 5\n  }, this);\n};\n_s2(TriageProvider, \"fsWtaI7m/csevKfbAXZr/mgUNXM=\");\n_c = TriageProvider;\nvar _c;\n$RefreshReg$(_c, \"TriageProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","TriageContext","undefined","useTriageContext","_s","context","Error","TriageProvider","children","_s2","patientData","setPatientDataState","triageResult","setTriageResultState","nurseNotes","setNurseNotesState","isLoading","setIsLoadingState","error","setErrorState","savedPatientData","localStorage","getItem","savedTriageResult","savedNurseNotes","JSON","parse","setPatientData","data","setItem","stringify","removeItem","console","setTriageResult","result","setNurseNotes","notes","clearData","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/tkurt/Desktop/ai-triage/triage-frontend/src/contexts/TriageContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\r\n\r\ninterface TriageContextType {\r\n  patientData: any;\r\n  setPatientData: (data: any) => void;\r\n  triageResult: any;\r\n  setTriageResult: (result: any) => void;\r\n  nurseNotes: string;\r\n  setNurseNotes: (notes: string) => void;\r\n  isLoading: boolean;\r\n  setLoading: (loading: boolean) => void;\r\n  error: string | null;\r\n  setError: (error: string | null) => void;\r\n  clearData: () => void;\r\n}\r\n\r\nconst TriageContext = createContext<TriageContextType | undefined>(undefined);\r\n\r\nexport const useTriageContext = () => {\r\n  const context = useContext(TriageContext);\r\n  if (!context) {\r\n    throw new Error('useTriageContext must be used within a TriageProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\ninterface TriageProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\nexport const TriageProvider: React.FC<TriageProviderProps> = ({ children }) => {\r\n  const [patientData, setPatientDataState] = useState<any>(null);\r\n  const [triageResult, setTriageResultState] = useState<any>(null);\r\n  const [nurseNotes, setNurseNotesState] = useState<string>('');\r\n  const [isLoading, setIsLoadingState] = useState<boolean>(false);\r\n  const [error, setErrorState] = useState<string | null>(null);\r\n\r\n  // Load data from localStorage on mount\r\n  useEffect(() => {\r\n    const savedPatientData = localStorage.getItem('triage-patient-data');\r\n    const savedTriageResult = localStorage.getItem('triage-result');\r\n    const savedNurseNotes = localStorage.getItem('triage-nurse-notes');\r\n\r\n    if (savedPatientData) {\r\n      setPatientDataState(JSON.parse(savedPatientData));\r\n    }\r\n    if (savedTriageResult) {\r\n      setTriageResultState(JSON.parse(savedTriageResult));\r\n    }\r\n    if (savedNurseNotes) {\r\n      setNurseNotesState(savedNurseNotes);\r\n    }\r\n  }, []);\r\n\r\n  const setPatientData = (data: any) => {\r\n    try {\r\n      setPatientDataState(data);\r\n      if (data) {\r\n        localStorage.setItem('triage-patient-data', JSON.stringify(data));\r\n      } else {\r\n        localStorage.removeItem('triage-patient-data');\r\n      }\r\n    } catch (error) {\r\n      console.error('localStorage error:', error);\r\n      setErrorState('Veri kaydetme hatası');\r\n    }\r\n  };\r\n\r\n  const setTriageResult = (result: any) => {\r\n    try {\r\n      setTriageResultState(result);\r\n      if (result) {\r\n        localStorage.setItem('triage-result', JSON.stringify(result));\r\n      } else {\r\n        localStorage.removeItem('triage-result');\r\n      }\r\n    } catch (error) {\r\n      console.error('localStorage error:', error);\r\n      setErrorState('Veri kaydetme hatası');\r\n    }\r\n  };\r\n\r\n  const setNurseNotes = (notes: string) => {\r\n    try {\r\n      setNurseNotesState(notes);\r\n      if (notes) {\r\n        localStorage.setItem('triage-nurse-notes', notes);\r\n      } else {\r\n        localStorage.removeItem('triage-nurse-notes');\r\n      }\r\n    } catch (error) {\r\n      console.error('localStorage error:', error);\r\n      setErrorState('Veri kaydetme hatası');\r\n    }\r\n  };\r\n\r\n  const clearData = () => {\r\n    try {\r\n      setPatientDataState(null);\r\n      setTriageResultState(null);\r\n      setNurseNotesState('');\r\n      setIsLoadingState(false);\r\n      setErrorState(null);\r\n      localStorage.removeItem('triage-patient-data');\r\n      localStorage.removeItem('triage-result');\r\n      localStorage.removeItem('triage-nurse-notes');\r\n    } catch (error) {\r\n      console.error('localStorage error:', error);\r\n      setErrorState('Veri temizleme hatası');\r\n    }\r\n  };\r\n\r\n  const value: TriageContextType = {\r\n    patientData,\r\n    setPatientData,\r\n    triageResult,\r\n    setTriageResult,\r\n    nurseNotes,\r\n    setNurseNotes,\r\n    clearData,\r\n  };\r\n\r\n  return (\r\n    <TriageContext.Provider value={value}>\r\n      {children}\r\n    </TriageContext.Provider>\r\n  );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}